/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RandomNumberGenerator,
  RandomNumberGeneratorInterface,
} from "../../../contracts/RandomGenerator.sol/RandomNumberGenerator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_link",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_keyhash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "_subscriptionId",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "roomId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "randomness",
        type: "uint256",
      },
    ],
    name: "FulfilledRandomness",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRandomness",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "TransferOwnership",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "consumerAddress",
        type: "address",
      },
    ],
    name: "addConsumer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_roomId",
        type: "bytes32",
      },
    ],
    name: "getRandom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "contract GovernanceInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mostRecentRandomness",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requestIds",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a0604052620186a06007601c6101000a81548163ffffffff021916908363ffffffff1602179055506003600860006101000a81548161ffff021916908361ffff1602179055506001600860026101000a81548163ffffffff021916908363ffffffff1602179055503480156200007557600080fd5b50604051620014113803806200141183398181016040528101906200009b9190620002fa565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508260008190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555084600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000382565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002428262000215565b9050919050565b620002548162000235565b81146200026057600080fd5b50565b600081519050620002748162000249565b92915050565b6000819050919050565b6200028f816200027a565b81146200029b57600080fd5b50565b600081519050620002af8162000284565b92915050565b600067ffffffffffffffff82169050919050565b620002d481620002b5565b8114620002e057600080fd5b50565b600081519050620002f481620002c9565b92915050565b600080600080600060a0868803121562000319576200031862000210565b5b6000620003298882890162000263565b95505060206200033c8882890162000263565b94505060406200034f888289016200029e565b9350506060620003628882890162000263565b92505060806200037588828901620002e3565b9150509295509295909350565b60805161106c620003a56000396000818161029e01526102f2015261106c6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635aa6e6751161005b5780635aa6e675146100d85780638796ba8c146100f6578063b737ed1b14610126578063f2fde38b146101425761007d565b806303754d8214610082578063112940f9146100a05780631fe543e3146100bc575b600080fd5b61008a61015e565b604051610097919061089c565b60405180910390f35b6100ba60048036038101906100b59190610929565b610164565b005b6100d660048036038101906100d19190610adb565b61029c565b005b6100e061035c565b6040516100ed9190610b96565b60405180910390f35b610110600480360381019061010b9190610bb1565b610382565b60405161011d9190610bf7565b60405180910390f35b610140600480360381019061013b9190610c3e565b61039a565b005b61015c60048036038101906101579190610929565b6105ba565b005b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101eb90610cc8565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637341c10c600760149054906101000a900467ffffffffffffffff16836040518363ffffffff1660e01b8152600401610267929190610d1a565b600060405180830381600087803b15801561028157600080fd5b505af1158015610295573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034e57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610345929190610d43565b60405180910390fd5b61035882826106c5565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190610db8565b60405180910390fd5b6000801b60005403610471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046890610e24565b60405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600054600760149054906101000a900467ffffffffffffffff16600860009054906101000a900461ffff166007601c9054906101000a900463ffffffff16600860029054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610522959493929190610e80565b6020604051808303816000875af1158015610541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105659190610ee8565b90508160016000838152602001908152602001600020819055507f5d7d0431c4991fcc9f63f03ad0ead4128b866a8ed115a818b6d87a3afedb7264816040516105ae919061089c565b60405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190610cc8565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a4816040516106ba9190610f15565b60405180910390a150565b6000816000815181106106db576106da610f30565b5b6020026020010151905060008111610728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071f90610fab565b60405180910390fd5b806002819055506000600160008581526020019081526020016000205490507f493080faa48504a73e78bdf04fb73125ae72c2d6e2ab9bfaa563158cae1d71558183604051610778929190610fcb565b60405180910390a1600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372fd0a586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108119190611009565b73ffffffffffffffffffffffffffffffffffffffff166367cada8d82846040518363ffffffff1660e01b815260040161084b929190610fcb565b600060405180830381600087803b15801561086557600080fd5b505af1158015610879573d6000803e3d6000fd5b5050505050505050565b6000819050919050565b61089681610883565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108f6826108cb565b9050919050565b610906816108eb565b811461091157600080fd5b50565b600081359050610923816108fd565b92915050565b60006020828403121561093f5761093e6108c1565b5b600061094d84828501610914565b91505092915050565b61095f81610883565b811461096a57600080fd5b50565b60008135905061097c81610956565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109d082610987565b810181811067ffffffffffffffff821117156109ef576109ee610998565b5b80604052505050565b6000610a026108b7565b9050610a0e82826109c7565b919050565b600067ffffffffffffffff821115610a2e57610a2d610998565b5b602082029050602081019050919050565b600080fd5b6000610a57610a5284610a13565b6109f8565b90508083825260208201905060208402830185811115610a7a57610a79610a3f565b5b835b81811015610aa35780610a8f888261096d565b845260208401935050602081019050610a7c565b5050509392505050565b600082601f830112610ac257610ac1610982565b5b8135610ad2848260208601610a44565b91505092915050565b60008060408385031215610af257610af16108c1565b5b6000610b008582860161096d565b925050602083013567ffffffffffffffff811115610b2157610b206108c6565b5b610b2d85828601610aad565b9150509250929050565b6000819050919050565b6000610b5c610b57610b52846108cb565b610b37565b6108cb565b9050919050565b6000610b6e82610b41565b9050919050565b6000610b8082610b63565b9050919050565b610b9081610b75565b82525050565b6000602082019050610bab6000830184610b87565b92915050565b600060208284031215610bc757610bc66108c1565b5b6000610bd58482850161096d565b91505092915050565b6000819050919050565b610bf181610bde565b82525050565b6000602082019050610c0c6000830184610be8565b92915050565b610c1b81610bde565b8114610c2657600080fd5b50565b600081359050610c3881610c12565b92915050565b600060208284031215610c5457610c536108c1565b5b6000610c6284828501610c29565b91505092915050565b600082825260208201905092915050565b7f6f6e6c79206f776e65722063616e2063616c6c20697400000000000000000000600082015250565b6000610cb2601683610c6b565b9150610cbd82610c7c565b602082019050919050565b60006020820190508181036000830152610ce181610ca5565b9050919050565b600067ffffffffffffffff82169050919050565b610d0581610ce8565b82525050565b610d14816108eb565b82525050565b6000604082019050610d2f6000830185610cfc565b610d3c6020830184610d0b565b9392505050565b6000604082019050610d586000830185610d0b565b610d656020830184610d0b565b9392505050565b7f6f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c20697400600082015250565b6000610da2601f83610c6b565b9150610dad82610d6c565b602082019050919050565b60006020820190508181036000830152610dd181610d95565b9050919050565b7f4d757374206861766520612076616c6964206b65796861736821000000000000600082015250565b6000610e0e601a83610c6b565b9150610e1982610dd8565b602082019050919050565b60006020820190508181036000830152610e3d81610e01565b9050919050565b600061ffff82169050919050565b610e5b81610e44565b82525050565b600063ffffffff82169050919050565b610e7a81610e61565b82525050565b600060a082019050610e956000830188610be8565b610ea26020830187610cfc565b610eaf6040830186610e52565b610ebc6060830185610e71565b610ec96080830184610e71565b9695505050505050565b600081519050610ee281610956565b92915050565b600060208284031215610efe57610efd6108c1565b5b6000610f0c84828501610ed3565b91505092915050565b6000602082019050610f2a6000830184610d0b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f72616e646f6d206e6f7420666f756e6400000000000000000000000000000000600082015250565b6000610f95601083610c6b565b9150610fa082610f5f565b602082019050919050565b60006020820190508181036000830152610fc481610f88565b9050919050565b6000604082019050610fe06000830185610be8565b610fed602083018461088d565b9392505050565b600081519050611003816108fd565b92915050565b60006020828403121561101f5761101e6108c1565b5b600061102d84828501610ff4565b9150509291505056fea26469706673582212206399b169509f799ff71a3cbdde937f01f041306ffadae63e552ac4668cd4db5064736f6c634300080f0033";

type RandomNumberGeneratorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomNumberGeneratorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomNumberGenerator__factory extends ContractFactory {
  constructor(...args: RandomNumberGeneratorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vrfCoordinator: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    _keyhash: PromiseOrValue<BytesLike>,
    _governance: PromiseOrValue<string>,
    _subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RandomNumberGenerator> {
    return super.deploy(
      _vrfCoordinator,
      _link,
      _keyhash,
      _governance,
      _subscriptionId,
      overrides || {}
    ) as Promise<RandomNumberGenerator>;
  }
  override getDeployTransaction(
    _vrfCoordinator: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    _keyhash: PromiseOrValue<BytesLike>,
    _governance: PromiseOrValue<string>,
    _subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _vrfCoordinator,
      _link,
      _keyhash,
      _governance,
      _subscriptionId,
      overrides || {}
    );
  }
  override attach(address: string): RandomNumberGenerator {
    return super.attach(address) as RandomNumberGenerator;
  }
  override connect(signer: Signer): RandomNumberGenerator__factory {
    return super.connect(signer) as RandomNumberGenerator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomNumberGeneratorInterface {
    return new utils.Interface(_abi) as RandomNumberGeneratorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomNumberGenerator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RandomNumberGenerator;
  }
}
