/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DuelInterface extends utils.Interface {
  functions: {
    "checkPlayerWon(bytes32,uint256)": FunctionFragment;
    "duelRooms(bytes32,uint256)": FunctionFragment;
    "endDuel(bytes32,uint256)": FunctionFragment;
    "enterDuel(bytes32)": FunctionFragment;
    "forceEndDuel(bytes32)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getRoomCount(bytes32)": FunctionFragment;
    "getRoomPlayer(bytes32,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkPlayerWon"
      | "duelRooms"
      | "endDuel"
      | "enterDuel"
      | "forceEndDuel"
      | "getBalance"
      | "getRoomCount"
      | "getRoomPlayer"
      | "governance"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkPlayerWon",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "duelRooms",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endDuel",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterDuel",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceEndDuel",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomPlayer",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkPlayerWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duelRooms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endDuel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enterDuel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceEndDuel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoomCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoomPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EndDuel(uint256)": EventFragment;
    "EnterDuel(address)": EventFragment;
    "ForceEndDuel(address)": EventFragment;
    "StartDuel()": EventFragment;
    "TransferOwnership(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EndDuel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterDuel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceEndDuel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartDuel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnership"): EventFragment;
}

export interface EndDuelEventObject {
  randomness: BigNumber;
}
export type EndDuelEvent = TypedEvent<[BigNumber], EndDuelEventObject>;

export type EndDuelEventFilter = TypedEventFilter<EndDuelEvent>;

export interface EnterDuelEventObject {
  player: string;
}
export type EnterDuelEvent = TypedEvent<[string], EnterDuelEventObject>;

export type EnterDuelEventFilter = TypedEventFilter<EnterDuelEvent>;

export interface ForceEndDuelEventObject {
  withdrawer: string;
}
export type ForceEndDuelEvent = TypedEvent<[string], ForceEndDuelEventObject>;

export type ForceEndDuelEventFilter = TypedEventFilter<ForceEndDuelEvent>;

export interface StartDuelEventObject {}
export type StartDuelEvent = TypedEvent<[], StartDuelEventObject>;

export type StartDuelEventFilter = TypedEventFilter<StartDuelEvent>;

export interface TransferOwnershipEventObject {
  newOwner: string;
}
export type TransferOwnershipEvent = TypedEvent<
  [string],
  TransferOwnershipEventObject
>;

export type TransferOwnershipEventFilter =
  TypedEventFilter<TransferOwnershipEvent>;

export interface Duel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DuelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkPlayerWon(
      _roomId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    duelRooms(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        _address: string;
        _betAmount: BigNumber;
        _hasWon: boolean;
      }
    >;

    endDuel(
      _roomId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterDuel(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceEndDuel(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoomCount(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoomPlayer(
      _roomId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkPlayerWon(
    _roomId: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  duelRooms(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      _address: string;
      _betAmount: BigNumber;
      _hasWon: boolean;
    }
  >;

  endDuel(
    _roomId: PromiseOrValue<BytesLike>,
    _randomness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterDuel(
    _roomId: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceEndDuel(
    _roomId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRoomCount(
    _roomId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoomPlayer(
    _roomId: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    toAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkPlayerWon(
      _roomId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    duelRooms(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        _address: string;
        _betAmount: BigNumber;
        _hasWon: boolean;
      }
    >;

    endDuel(
      _roomId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterDuel(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceEndDuel(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoomCount(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoomPlayer(
      _roomId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      toAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EndDuel(uint256)"(randomness?: null): EndDuelEventFilter;
    EndDuel(randomness?: null): EndDuelEventFilter;

    "EnterDuel(address)"(player?: null): EnterDuelEventFilter;
    EnterDuel(player?: null): EnterDuelEventFilter;

    "ForceEndDuel(address)"(withdrawer?: null): ForceEndDuelEventFilter;
    ForceEndDuel(withdrawer?: null): ForceEndDuelEventFilter;

    "StartDuel()"(): StartDuelEventFilter;
    StartDuel(): StartDuelEventFilter;

    "TransferOwnership(address)"(newOwner?: null): TransferOwnershipEventFilter;
    TransferOwnership(newOwner?: null): TransferOwnershipEventFilter;
  };

  estimateGas: {
    checkPlayerWon(
      _roomId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    duelRooms(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endDuel(
      _roomId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterDuel(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceEndDuel(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoomCount(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoomPlayer(
      _roomId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkPlayerWon(
      _roomId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duelRooms(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endDuel(
      _roomId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterDuel(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceEndDuel(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoomCount(
      _roomId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoomPlayer(
      _roomId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
